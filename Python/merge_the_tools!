###########################################
Consider the following:

A string, , of length  where .
An integer, , where  is a factor of .
We can split  into  subsegments where each subsegment, , consists of a contiguous block of  characters in . Then, use each  to create string  such that:

The characters in  are a subsequence of the characters in .
Any repeat occurrence of a character is removed from the string such that each character in  occurs exactly once. In other words, if the character at some index  in  occurs at a previous index  in , then do not include the character in string .
Given  and , print  lines where each line  denotes string .

Input Format

The first line contains a single string denoting . 
The second line contains an integer, , denoting the length of each subsegment.

Constraints

, where  is the length of 
It is guaranteed that  is a multiple of .
Output Format

Print  lines where each line  contains string .

Sample Input

AABCAAADA
3   
Sample Output

AB
CA
AD
#########################################################################################################################3333

def merge_the_tools(str, k):
    #splitting a long string into multiple short strings of 'k' length
    l = [str[i:i+k] for i in range(0, len(str), k)]
    
    #List to store strings after removing duplicate characters
    final = []
    
    #Removing duplicate characters
    for i in range(len(l)):
        latest = l[i]
        local = ''
        for j in range(len(latest)):
            if latest[j] not in local:
                local = local + latest[j]
        final.append(local)
        
    #Printing the values of the final list
    for i in range(len(final)):
        print(final[i])
                
        
if __name__ == '__main__':
    string, k = input(), int(input())
    merge_the_tools(string, k)
